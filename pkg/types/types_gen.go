// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package types

import "encoding/json"
import "fmt"
import yaml "gopkg.in/yaml.v3"

type ContainerState struct {
	// ConfigHash corresponds to the JSON schema field "config_hash".
	ConfigHash string `json:"config_hash" yaml:"config_hash" mapstructure:"config_hash"`

	// ExitCode corresponds to the JSON schema field "exit_code".
	ExitCode *int `json:"exit_code,omitempty" yaml:"exit_code,omitempty" mapstructure:"exit_code,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// Status corresponds to the JSON schema field "status".
	Status string `json:"status" yaml:"status" mapstructure:"status"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ContainerState) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["config_hash"]; raw != nil && !ok {
		return fmt.Errorf("field config_hash in ContainerState: required")
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in ContainerState: required")
	}
	if _, ok := raw["status"]; raw != nil && !ok {
		return fmt.Errorf("field status in ContainerState: required")
	}
	type Plain ContainerState
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ContainerState(plain)
	return nil
}

// UnmarshalYAML implements yaml.Unmarshaler.
func (j *ContainerState) UnmarshalYAML(value *yaml.Node) error {
	var raw map[string]interface{}
	if err := value.Decode(&raw); err != nil {
		return err
	}
	if _, ok := raw["config_hash"]; raw != nil && !ok {
		return fmt.Errorf("field config_hash in ContainerState: required")
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in ContainerState: required")
	}
	if _, ok := raw["status"]; raw != nil && !ok {
		return fmt.Errorf("field status in ContainerState: required")
	}
	type Plain ContainerState
	var plain Plain
	if err := value.Decode(&plain); err != nil {
		return err
	}
	*j = ContainerState(plain)
	return nil
}

type EnvVar struct {
	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// Value corresponds to the JSON schema field "value".
	Value string `json:"value" yaml:"value" mapstructure:"value"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *EnvVar) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in EnvVar: required")
	}
	if _, ok := raw["value"]; raw != nil && !ok {
		return fmt.Errorf("field value in EnvVar: required")
	}
	type Plain EnvVar
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = EnvVar(plain)
	return nil
}

// UnmarshalYAML implements yaml.Unmarshaler.
func (j *EnvVar) UnmarshalYAML(value *yaml.Node) error {
	var raw map[string]interface{}
	if err := value.Decode(&raw); err != nil {
		return err
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in EnvVar: required")
	}
	if _, ok := raw["value"]; raw != nil && !ok {
		return fmt.Errorf("field value in EnvVar: required")
	}
	type Plain EnvVar
	var plain Plain
	if err := value.Decode(&plain); err != nil {
		return err
	}
	*j = EnvVar(plain)
	return nil
}

type Spec struct {
	// Args corresponds to the JSON schema field "args".
	Args []string `json:"args,omitempty" yaml:"args,omitempty" mapstructure:"args,omitempty"`

	// Command corresponds to the JSON schema field "command".
	Command []string `json:"command,omitempty" yaml:"command,omitempty" mapstructure:"command,omitempty"`

	// Env corresponds to the JSON schema field "env".
	Env []EnvVar `json:"env,omitempty" yaml:"env,omitempty" mapstructure:"env,omitempty"`

	// Image corresponds to the JSON schema field "image".
	Image string `json:"image" yaml:"image" mapstructure:"image"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name" mapstructure:"name"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Spec) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["image"]; raw != nil && !ok {
		return fmt.Errorf("field image in Spec: required")
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in Spec: required")
	}
	type Plain Spec
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if plain.Command != nil && len(plain.Command) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "command", 1)
	}
	*j = Spec(plain)
	return nil
}

// UnmarshalYAML implements yaml.Unmarshaler.
func (j *Spec) UnmarshalYAML(value *yaml.Node) error {
	var raw map[string]interface{}
	if err := value.Decode(&raw); err != nil {
		return err
	}
	if _, ok := raw["image"]; raw != nil && !ok {
		return fmt.Errorf("field image in Spec: required")
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in Spec: required")
	}
	type Plain Spec
	var plain Plain
	if err := value.Decode(&plain); err != nil {
		return err
	}
	if plain.Command != nil && len(plain.Command) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "command", 1)
	}
	*j = Spec(plain)
	return nil
}
